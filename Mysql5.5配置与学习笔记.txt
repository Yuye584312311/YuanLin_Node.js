第一天内容：


1：安装与配置：
安装：以mysql server 5.5为例，双击mis一路next安装
配置：找到安装目录：默认在：C:\Program Files\MySQL\MySQL Server 5.5，找到MySQLInstanceConfig.exe可执行文件并双击打开开始配置
需要注意的是WIN10系统下安装之前，需要右键-属性-以兼容模式运行此安装程序 勾选复选框之后再安装。
1.1：选择安装功能的类型:初学者训责默认的标准服务
1.2：选择 训责运行模式，建议开发者，CPU不会全部占用



2：目录库结构：
bin:可执行文件
data：存储数据文件
docs：文档
include：存储包含的头文件
lib：存储库文件
share：错误消息和字符集文件



3：基本配置：
安装根目录下找到my.ini文件双击打开
需要注意以下几项，需要手动修改数据库编码方式
#Path to the database root
datadir="C:/ProgramData/MySQL/MySQL Server 5.5/Data/"
服务器端存储文件的编码格式
character-set-server=utf8
[client]
port=3306 //请确定你的端口号是3306
[mysql]
default-character-set=utf8



4：服务的启动与停止：
net start mysql :启动服务
net stop mysql ：停止服务
cls ：清屏
注：这两个命令(net start,net stop)适用于Window下所有的服务



5：登陆与退出

5.1：mysql的基本命令使用：
mysql -V :当前的版本号信息
mysql -uroot -p密码 :显示密码登陆mysql账户，
mysql -uroot -p :隐示密码登陆mysql账户，回车后输入登陆密码
-P3306：端口号  -h127.0.0.1 :服务地址 ，这两个参数是是登陆的时候会默认会带上的，如果你的主机mysql端口确定是3306，你的IP地址确定是127.0.0.1就不需要再次手动输入，链接外网部署得数据库，需要输入对应得端口号和IP地址
登陆的完整命令：mysql -uroot -p -P3306 -h127.0.0.1
出现 mysql> 表示登陆成功

5.2：退出登陆或推出mysql
mysql> 状态下 输入exit;或quit;或者\q; 其中一个即可。



6：修改mysql提示符：
两种方式：

6.1：链接客户端时通过参数指定
mysql -uroot -p你的密码 --prompt提示符，解释：mysql -u用户 -p密码 --prompt \h
完整命令：mysql -uroot -p你的密码 --prompt \h

6.2：链接客户端后，通过prompt命令修改

prompt mysql> 修改为mysql提示符

6.3：提示符 改成用户名+主机名+数据库名方法
\D：完整的日期
\d：当前数据库
\h：服务器名称
\u：当前用户
输入命令：PROMPT \u@\h \d>
此时数据库的名称时none，紧接着输入 USE test；可打开数据库,test为系统数据库，可换成你的名字名字
打开系统的数据库：
USE test;
还可以输入以下函数查看信息：
每句话需要以;结束
SELECT SERSION();查看版本信息
SELECT USER();查看当前登陆的用户



7:语句规范：
关键字与函数名称全部大写
数据库名、表名称、字段名称全部小写
SQL语句必须分号结束



8：数据库的创建、修改、删除
CREATE {DATABASE|SCHEMA} [IF NOT EXISTS] da_name [DEFAULT] CHARACTER SET [=] charset_name
语法结构：{}必须要有的，其中的|时选择项，[]可选的，db_name 必选

8.1:数据库的创建
CREATE DATABASE db_name;//创建一个数据库 

8.1.1：查看所有数据库列表:
SHOW DATABASES;
8.1.2：创建数据库规避错误信息方法：用于假如该数据已存在了
CREATE DATABASE IF NOT EXISTS test1;  使用IF NOT 语句，可以告诉系统，如果数据库表已存在，不要报错没直接查询结果

8.1.3：查看警告信息；
SHOW WARNINGS;

8.1.4：查看数据库的编码方式：
SHOW CREATE DATABASE db_name; 

8.1.5：创建制制定编码格式的数据库 完整的SQL语句
CREATE DATABASE IF NOT EXISTS db_name CHARACTER SET charset_name;

8.1.6：显示已经打开得数据库
SELECT DATABASE();

8.2：数据库的修改
ALTER {DATABASE|SCHEMA} [db_name] [DEFAULT] CHARACTER SET [=] charset_name
语法结构：同创建语法一致；

8.2.1：修改执行数据库的编码格式
ALTER DATABASE db_name CHARACTER SET = (编码名称，以utf8为例)utf8;

8.3：数据库的删除
DROP {DATABASE|SCHEMA} [IF EXISTS] db_name

8.3.1：删除一个数据库
DROP DATABASE db_name;

8.3.2：删除一个数据库规避办法，避免报错
DROP DATABASE IF EXISTS db_name;




第二天内容：

1：数据类型
、是指列、存储过程参数、表达式和局部变量的数据特征，不同的数据格式。如：java 中的int string folat boolean 

1.1：整形：
整形类型：
1.1.1：TINYINT: 有符号位（负整数）：-128-127 占用一个字节，无符号位（只有正数）：0-255 。占用一个字节 
1.1.1：SMALLINT: 有符号位 ：-32768 -32767，无符号位：0-65535 。占用两个字节
1.1.1：MEDIUMINT: 有符号位-8388608-8388607，无符号位：0-16777215 。占用三个字节
1.1.1：INT: 有符号位：-2147483648-2147483647，无符号位：0-4294967295。占用4个字节
1.1.1：BIGINT: 有符号位： -9223372036854775808-9223372036854775807，无符号位：0-1844674407370955161。占用8个字节

1.2：浮点型：
M:小数点前面的位数总和，D：小数点后面位数的总和
1.2.1：FLOAT[M,D] -3.402823466E+38到-1.175494351E-38，0和1.75494351E-38到3.402823466E+38   
1.2.2：DOUBLE[M,D] -1.7976931348623157E+308到-2.2250738585072014E-308

1.3：日期类型：
YEAR：1字节 1970-2069年之间的日期时间类型，如2018年1月1日，当然项目中不会用到日期时间，大多用时间戳取代，因为存在时间戳概念
TIME：2字节 范围：-8385959到8385959时间戳
DATE：3字节 范围1000年1月1日到9999年的12月31号
DATETIME：8字节 日期时间：1000年1月1日0点到9999年的12月31号23点59分59秒
TIMESTAMP：4字节，时间戳：1970年1月1日0点起到-2037年12月31日

1.4：字符型
M代表个数
CHAR(M)：定常类型，如果要存储的字符串长度不够默认的长度，将以空格补充，M个字节，0《-M<=255，最大长度255个字节
VARCHAR(M)：变长类型，存储了字符类型后不会改变，65535个字节
TINYREXT：2的8次方个字节
TEXT：2的16次方
MEDIUMTEXT：2的24次方
LONGTEXT：2的32次方
ENUM('value','value2',...)：枚举：1或2个字节，取决于枚举值得个数，加入性别有男、女，那么就只能存储其中一个，最多65535个值
SET('value1','value2',...)：集合：1、2、3、4或者8个字节，取决于成员的数目（最多64个成员）

2：数据表
是数据库最重要得组成部分之一，是其他对象得基础，也称二维表格，由行和列组成，行：字段，列：记录 

USE：使用或者打开某个数据库
2.1：创建数据表:
CREATE TABLE [IF NOT EXISTS] tab_name(
	column_name data_type,
	...
)
tab_name：数据表名称，column_name：列表名 data_type：数据类型，，为行得分隔符，最后一个字段无需逗号

完整命令：
2.1.1：先保证表存在
2.1.2：USE db_name;下
2.1.3：CREATE TABLE user(
   username VARCHAR(20),//列名称，数据类型，定义为边长类型，最长20个4个字节得字符
   age TINYINT UNSIGNED,//整数类型，UNSIGNED：不允许由附负数
   salary FLOAT(8,2) UNSIGNED//浮点类型，不允许由负数
);

创建一张在数据库test下创建一张user数据表，表中插入三个字段，第一个字段名字为username，约定记录内容为变长类型，不超过20个4位字节得字符，....
root@localhost test>CREATE TABLE user(
    -> username VARCHAR(20),
    -> age TINYINT UNSIGNED,
    -> salary FLOAT(8,2) UNSIGNED
    -> );
Query OK, 0 rows affected (0.00 sec)
root@localhost test>

2.2：查看数据表列表
SHOW TABLES [FROM db_name] [LIKE 'pattern'| WHERE expr]
SHOW TABLES; //查看所有数据库下得所有列表
SHOW TABLES FROM db_name;//查看db_name数据库中得所有表

2.3：查看数据表结构
SHOW COLUMNS FROM tab_name；
例：SHOW COLUMNS FROM user2;

2.4：插入记录
INSERT [INTO] tab_name[(key1,key2,...)] VARUES(value1,value1,...);
例： INSERT user VALUES('TianYu Huang',28,'http://www.baidu.com','HIUHhiuHihuhHI=MIO09nmJKL','wuhan','1000-00-00 00:00:00');

2.5：查找记录
SELECT expr,... FROM tab_name;
完整命令：SELECT * FROM tab_name;//*字段得过滤，*标识所有都显示

2.6：为数据表字段添加默认属性
NULL：字段值可以为空
NOT NULL：字段值禁止为空
在创建表得时候后面指定是否可以为空或者非空等,插入数据就必须按照约定类存储，否则报错

2.7：删除数据表：
DROP TABLE tab_name;

2.8：自动编号：AUTO_INCREMENT 与主键组合使用，必须定义为主键，而PRIMARY KEY不一定需要与AUTO_INCREMENT一起使用。主键自动约束NOT NULL属性
示例：id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
默认情况下，起始值为1，自增增量为1，保障了每一条数据得唯一性
第一个字

2.9:主键 PRIMARY KEY
id SMALLINT UNSIGNED PRIMARY KEY
主键自动属性为NOT NULL，保证记录得唯一性，每张数据表之只能存在一个主键

3.0：唯一约束： UNIQUE KEY 
与PRIMARY KEY区别：UNIQUE KEY记录可以为空，可以存在多个；PRIMARY KEY不能为空，不能相同
每张数据表可以存在唯一约束
创建一张有主键约束和唯一约束得表：id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,//ID为自增长，且是唯一约束得

3.1：默认约束：DEFAULT
默认值，当插入记录时，如果没有明确为字段渎职，则自动赋予默认值
例如：sex ENUM('1','2','3') DEFAULT '3';//假设sex有三个值，1：男，2：女，3：保密，默认为保密，如果不写入会用默认值填充，写入覆盖。
mysql> CREATE TABLE tab6(
    -> id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    -> username VARCHAR(20) NOT NULL UNIQUE KEY,
    -> sex ENUM('1','2','3') DEFAULT '3'
    -> );


补充：
1.字段增加
ALTER TABLE tab_name ADD COLUMN new_tab_id_name VARCHAR(M) NOT NULL;//增加一个字段，数据类型默认不能为空
ALTER TABLE tab_name ADD COLUMN new_tab_id_name VARCHAR(M) DEFAULT NULL; //增加一个字段，数据类型默认为空
例：ALTER TABLE user ADD COLUMN sex VARCHAR(M);

2.字段删除
ALTER TABLE tab_name DROP COLUMN tab_id_name; 　 //删除一个字段
例：ALTER TABLE user DROP COLUMN sex;

3.字段修改
ALTER TABLE tab_name MODIFY COLUMN tab_id_name VARCHAR(M); 　//修改一个字段的类型
ALTER TABLE tab_name CHANGE COLUMN tab_id_name new_tab_id_name VARCHAR(M);　 //修改一个字段的名称，此时一定要重新指定该字段的类型
例：ALTER TABLE user CHANGE COLUMN sex VARCHAR(M);

4.修改表的编码格式
ALTER TABLE tab_name DEFAULT CHARACTER SET char_setname COLLATE utf8_bin;
例： ALTER TABLE goodlist DEFAULT CHARACTER SET utf8 COLLATE utf8_bin;

5.表名修改：
ALTER TABLE tab_name RENAME TO new_tab_name;

测试项目：
数据库：app_data 
表：userinfo
字段：
mysql> CREATE TABLE IF NOT EXISTS userinfo(
    -> id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    -> openid VARCHAR(255) NOT NULL,
    -> nickname VARCHAR(20) NULL,
    -> city VARCHAR(20) NULL,
    -> face VARCHAR(255),
    -> phonenumber VARCHAR(255) NULL,
    -> account VARCHAR(255) NULL,
    -> password VARCHAR(255) NULL,
    -> add_time DATETIME NOT NULL,
    -> login_type VARCHAR(5) NULL,
    -> );
Query OK, 0 rows affected (0.02 sec)

表：dooglist
字段：
mysql> CREATE TABLE IF NOT EXISTS goodlist(
    -> id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    -> good_id BIGINT UNSIGNED,
    -> good_name VARCHAR(255) NULL,
    -> good_price VARCHAR(20) NULL,
    -> good_cover VARCHAR(255) NULL,
    -> good_desp VARCHAR(255) NULL,
    -> good_class VARCHAR(20) NULL,
    -> good_type VARCHAR(10) NULL,
    -> good_location VARCHAR(255) NULL,
    -> good_mail VARCHAR(20) NULL,
    -> good_volume INT(20) NULL,
    -> share_times INT(20) NULL,
    -> collect_times INT(20) NULL,
    -> look_times INT(20) NULL,
    -> add_time DATETIME NOT NULL
    -> );
Query OK, 0 rows affected (0.01 sec)


第三天内容：约束
1：约束保证数据得完整性和一致性
2：约束分为表级约束和列级约束。
如果约束针对某一个字段约束称之为列级约束，两个或者两个以上字段称之为表级约束。
3：约束类型：
NOT NULL：非空约束
PRIMARY KEY：主键约束
UNIOUE KEY：唯一约束
DEFAULT：默认约束
FOREIGN KEY：外键约束
REFERENCES：参照命令

注意：使用外键约束，存储引擎必须是INNODB，修改My.ini文件中default-storage-engine=INNODB 属性即可。
1.1：FOREIGN KEY
保证数据一致性，完整性，实现一对一或一对多得关系。关系型数据库得根本与那因。
外键约束得要求：
1：父表和子表必须使用相同得存储引擎，禁止使用临时表。

子表：具有外键列的表。
父表：子表所参照的数据列表称之为父表。

2：数据表得存储引擎只能为InfoDB。
3：外键列和参照列必须具有相似的数据类型。其中数字的长度或是否有符号位必须
相同；而字符的长度则可以不同。

外键列：加过FOREIGN KEY的属性的数据列称之为外键列。
参照列：外键列所参照的列称之为参照列。

4：外键列和参照列必须创建索引，如果外键列不存在索引， Mysql将自动创建索引。

举个栗子：
1：创建一张省份的表(父表)
mysql> CREATE TABLE provin(
    -> id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    -> pname VARCHAR(20) NOT NULL);
Query OK, 0 rows affected (0.01 sec)
2：创建一张用户表，让用户表中的 pid字段与省份表中的id关联。（字表）
mysql> CREATE TABLE users(
    -> id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    -> username VARCHAR(10) NOT NULL,
    -> pid SMALLINT UNSIGNED,
    -> FOREIGN KEY (pid) REFERENCES provin(id)
    -> );
Query OK, 0 rows affected (0.01 sec)
users表中pid列参照省份表中的id字段。类型需要完全一致

3：查看表中的索引：SHOW INDEXES FORM tab_name;
以表格形式查看：SHOW INDEXES FORM tab_name\G;


4：外键约束的参数
1：CASCADE：从父表删除或更新且自动删除或更新子表中的匹配的行
2：SET NULL：从父表删除或更新行，并设置子表中的外键列为NULL,如果使用该选项，必须保证子列表没有制定NOT NULL;
3：RESTRICT：拒绝对父表的删除或更新
4：NO ACTION：标准SQL的关键字，在MySql中与RESTRICE相等

3.19：遇到的问题，当数据表中存在满足条件的一列则刷新某个字段，不存在就插入一条新的数据
解决办法：
1：INSERT 换成 REPLACE ，当数据表中不存在此列，则效果和 INSERT一致，否则删除已有的列，重新插入
例如：INSERT tab_name (a,b,c) VALUES(1,2,3)  换成 REPLACE tab_name (a,b,c) VALUES(1,2,3) 

2：使用ON DUPLICATE KEY UPDATE，前提是字段已经定义为唯一索引 UNIQUE
